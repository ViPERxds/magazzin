import asyncio
import os
import json
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from dotenv import load_dotenv
from database import init_db, save_order, update_order_status, get_user_orders

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏ URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL")
ADMIN_ID = os.getenv("ADMIN_ID")  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
CHANNEL_ID = os.getenv("CHANNEL_ID")  # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

logger.info(f"BOT_TOKEN: {BOT_TOKEN[:5]}...")
logger.info(f"WEBAPP_URL: {WEBAPP_URL}")
logger.info(f"ADMIN_ID: {ADMIN_ID}")
logger.info(f"CHANNEL_ID: {CHANNEL_ID}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
if not WEBAPP_URL:
    raise ValueError("WEBAPP_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
if not ADMIN_ID:
    raise ValueError("ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
if not CHANNEL_ID:
    raise ValueError("CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=WEBAPP_URL))],
            [types.KeyboardButton(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã.",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤
@dp.message(lambda message: message.text == "–ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def show_orders(message: types.Message):
    user_id = str(message.from_user.id)
    orders = get_user_orders(user_id)
    
    if not orders:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return
    
    for order in orders:
        status_emoji = {
            'pending': '‚è≥',
            'active': '‚úÖ',
            'rejected': '‚ùå'
        }.get(order['status'], '‚ùì')
        
        data = order['data']
        product = data.get('p', {})
        
        order_message = (
            f"{status_emoji} –ó–∞–∫–∞–∑ –æ—Ç {order['created_at']}\n\n"
            f"üè∑ –¢–æ–≤–∞—Ä: {product.get('n')}\n"
            f"üí∞ –¶–µ–Ω–∞: {product.get('p')} ‚ÇΩ\n"
            f"üì± –°—Ç–∞—Ç—É—Å: {order['status']}\n"
        )
        
        await message.answer(order_message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ
def create_request_message(request_data):
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {request_data}")
        data = json.loads(request_data)
        message = "üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:\n\n"
        
        # –î–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
        product = data.get('p', {})
        message += f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {product.get('n') or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        message += f"üí∞ –¶–µ–Ω–∞: {product.get('p') or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} ‚ÇΩ\n"
        
        # –î–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö
        requirements = data.get('r', {})
        message += f"üíµ –í—ã–ø–ª–∞—Ç–∞: {requirements.get('rp') or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} ‚ÇΩ\n"
        message += f"üîó –°—Å—ã–ª–∫–∞: {product.get('l') or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        
        # –î–∞–Ω–Ω—ã–µ –æ –º–∞–≥–∞–∑–∏–Ω–µ
        store = data.get('s', {})
        message += f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {store.get('n') or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        
        # –¢–ó
        message += f"\nüìã –¢–ó:\n{data.get('t') or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        
        # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–æ—Ü—Å–µ—Ç—è–º
        if requirements.get('sr'):
            message += "\nüì± –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–æ—Ü—Å–µ—Ç—è–º:\n"
            social_reqs = requirements['sr']
            
            for platform, reqs in social_reqs.items():
                if any(reqs.values()):
                    message += f"\n{platform.capitalize()}:\n"
                    for key, value in reqs.items():
                        if value:
                            message += f"- {key}: {value}\n"
        
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ")
        return message
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏: {str(e)}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏: {str(e)}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@dp.message()
async def web_app_handler(message: types.Message):
    if message.web_app_data:
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            data = json.loads(message.web_app_data.data)
            
            # –°–æ–∑–¥–∞–µ–º ID –∑–∞–∫–∞–∑–∞
            request_id = f"request_{message.from_user.id}_{message.message_id}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if not save_order(request_id, str(message.from_user.id), data):
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ
            request_message = create_request_message(message.web_app_data.data)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"approve_{request_id}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{request_id}")
                ]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_ID}")
            await bot.send_message(
                ADMIN_ID,
                request_message,
                reply_markup=keyboard
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID}")
            try:
                await bot.send_message(
                    chat_id=CHANNEL_ID,
                    text=request_message,
                    reply_markup=keyboard
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª: {str(e)}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
            await message.answer(
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n"
                "–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è."
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
@dp.callback_query(lambda c: c.data.startswith(('approve_', 'reject_')))
async def process_moderation(callback_query: types.CallbackQuery):
    try:
        action, request_id = callback_query.data.split('_', 1)
        user_id = callback_query.from_user.id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {action} –¥–ª—è {request_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        is_admin = str(user_id) == ADMIN_ID
        if not is_admin:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞
                member = await bot.get_chat_member(CHANNEL_ID, user_id)
                is_admin = member.status in ['administrator', 'creator']
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞: {str(e)}")
                is_admin = False
        
        if not is_admin:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
            return
        
        if action == 'approve':
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π
            if update_order_status(request_id, 'active'):
                logger.info(f"–ó–∞—è–≤–∫–∞ {request_id} –æ–¥–æ–±—Ä–µ–Ω–∞")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–Ω–æ–ø–æ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                message_text = callback_query.message.text
                if "\n\n‚úÖ" in message_text:
                    message_text = message_text.split("\n\n‚úÖ")[0]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ —Å –∞–¥–º–∏–Ω–æ–º
                await callback_query.message.edit_text(
                    f"{message_text}\n\n‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞",
                    reply_markup=None
                )
                
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ
                    messages = await bot.get_chat_history(chat_id=CHANNEL_ID, limit=50)
                    channel_message = None
                    
                    # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–∫–æ–π –∂–µ –∑–∞—è–≤–∫–æ–π
                    async for msg in messages:
                        if msg.text == message_text:
                            channel_message = msg
                            break
                    
                    if channel_message:
                        await bot.edit_message_text(
                            chat_id=CHANNEL_ID,
                            message_id=channel_message.message_id,
                            text=f"{message_text}\n\n‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞",
                            reply_markup=None
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ: {str(e)}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                original_user_id = request_id.split('_')[1]
                await bot.send_message(
                    original_user_id,
                    "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!"
                )
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–π
            if update_order_status(request_id, 'rejected'):
                logger.info(f"–ó–∞—è–≤–∫–∞ {request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
                
                message_text = callback_query.message.text
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ —Å –∞–¥–º–∏–Ω–æ–º
                await callback_query.message.edit_text(
                    f"{message_text}\n\n‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                    reply_markup=None
                )
                
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
                try:
                    messages = await bot.get_chat_history(chat_id=CHANNEL_ID, limit=50)
                    channel_message = None
                    
                    async for msg in messages:
                        if msg.text == message_text:
                            channel_message = msg
                            break
                    
                    if channel_message:
                        await bot.edit_message_text(
                            chat_id=CHANNEL_ID,
                            message_id=channel_message.message_id,
                            text=f"{message_text}\n\n‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                            reply_markup=None
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ: {str(e)}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                original_user_id = request_id.split('_')[1]
                await bot.send_message(
                    original_user_id,
                    "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
                )
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞")
        
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
@dp.message(Command("testchannel"))
async def test_channel(message: types.Message):
    if str(message.from_user.id) != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return
        
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º
        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
            test_msg = await bot.send_message(
                chat_id=CHANNEL_ID,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —é–∑–µ—Ä–Ω–µ–π–º –Ω–∞–ø—Ä—è–º—É—é
                text="üîÑ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª."
            )
            logger.info(f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! Message ID: {test_msg.message_id}")
            await message.answer("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª.")
            
        except Exception as direct_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(direct_error)}")
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            try:
                chat = await bot.get_chat(CHANNEL_ID)
                logger.info(f"–ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {chat.title} (ID: {chat.id})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
                bot_info = await bot.me()
                member = await bot.get_chat_member(chat.id, bot_info.id)
                logger.info(f"–ë–æ—Ç {bot_info.username} (ID: {bot_info.id})")
                logger.info(f"–ü—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ: {member.status}")
                
                error_details = (
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ, –Ω–æ –∫–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω:\n"
                    f"- –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: {chat.title}\n"
                    f"- ID –∫–∞–Ω–∞–ª–∞: {chat.id}\n"
                    f"- –¢–∏–ø —á–∞—Ç–∞: {chat.type}\n"
                    f"- –ü—Ä–∞–≤–∞ –±–æ—Ç–∞: {member.status}"
                )
                await message.answer(error_details)
                
            except Exception as info_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {str(info_error)}")
                await message.answer(f"‚ùå –ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(info_error)}")
        
    except Exception as e:
        error_msg = f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        logger.error(error_msg)
        logger.exception("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:")
        await message.answer(error_msg)

async def main():
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    init_db()
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º long polling
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ aiodns –Ω–∞ Windows
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    asyncio.run(main())
