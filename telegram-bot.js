const BOT_TOKEN = '8157458983:AAFSsAe4pdIg2FAA8yu67t7tCUU9tnd8NGI';
const CHANNEL_ID = '-1002416755558';

async function sendApplicationToChannel(applicationData) {
    const message = formatApplicationMessage(applicationData);
    const keyboard = {
        inline_keyboard: [
            [
                { text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data: 'approve_' + applicationData.id },
                { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: 'reject_' + applicationData.id }
            ]
        ]
    };

    try {
        const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: CHANNEL_ID,
                text: message,
                parse_mode: 'HTML',
                reply_markup: keyboard
            })
        });

        const result = await response.json();
        return result;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª:', error);
        throw error;
    }
}

function formatApplicationMessage(data) {
    return `üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é</b>

üì¶ <b>–¢–æ–≤–∞—Ä:</b> ${data.productName}
üí∞ <b>–¶–µ–Ω–∞:</b> ${data.price} ‚ÇΩ
üíé <b>–í—ã–ø–ª–∞—Ç–∞:</b> ${data.reward} ‚ÇΩ

üéØ <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>
${formatRequirements(data.requirements)}

üìù <b>–¢–ó:</b>
${data.description}

üè™ <b>–ú–∞–≥–∞–∑–∏–Ω:</b> ${data.storeName}
`;
}

function formatRequirements(requirements) {
    let result = '';
    if (requirements.instagram) {
        result += `‚Ä¢ Instagram: –æ—Ç ${requirements.instagram.followers} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n`;
        result += `  Stories: –æ—Ç ${requirements.instagram.stories} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n`;
        result += `  Reels: –æ—Ç ${requirements.instagram.reels} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n`;
    }
    if (requirements.vk) {
        result += `‚Ä¢ VK: –æ—Ç ${requirements.vk.followers} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n`;
    }
    return result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏
async function publishApplication(applicationData) {
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª
        const result = await sendApplicationToChannel(applicationData);
        
        if (result.ok) {
            return { success: true, message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é' };
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        return { success: false, message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏' };
    }
} 
